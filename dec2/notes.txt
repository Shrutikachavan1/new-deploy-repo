--> State Management :- It is a process in which we can pass the data from one page into another.By default the http page is state less. But if we want to manage the state we have 
  -> session (server side)
  -> cookie (client side)
  -> query string (done)
  -> hidden field (done)
     -> Express Js Cookies 
       Cookies are simple , small files/data that are sent to client with a server request and stored on the client side.(4kb). It is used to react of the user's action 
         -> user tracking 
         -> session management 
        npm install cookie-parser --save 
        const cookieparser=require('cookie-parser');
        app.use(cookieparser());
          -> How we set a cookie 
            res.cookie(name,"value",{expire:360000+Date.now()});
          -> How we delete a cookie 
            res.clearCookie(name);
          -> console.log(document.cookie)
      -> Session :- are server side so more secure.
        npm install express-session --save 
        -> How we set a session 
        const sessions=require('express-session');
        app.use(sessions({
           secret:"---uniquecode",
           saveUninitialized:true,
           cookie:{maxAge:oneDay},
           resave:false
        })) 
          -> secret :- a random string key used to authenticate a session.
          -> resave :- boolean value . default value is true 
          saveUninitialized:- this allows any uninitialized session to be sent to the store.
          -> authenticate with database and encrypt password 
            -> password encryption 
                bcrypt 
                https://www.npmjs.com/package/bcrypt
          -> CSRF token :- It is a secure rendom token that is used to prevent CSRF attacks. A CSRF secure application assigns a unique token for every user session.
            Cross-Site Request Forgery .
            npm install csurf cookie-parser --save  

            -> cookie 
            -> session 
            -> authetication 
            -> password encryption (bcrypt)
            -> csrf 
      -> Sending mails in node js 
        -> nodemailer 
        -> sendgrid 
       -> nodemailer implementation :- 
       https://nodemailer.com/about/
       Nodemailer is a module for Node.js applications to allow easy as cake email sending. 
       npm install nodemailer
       nodemailer-express-handlebars

       --> regis 
         email 
         Uname 
         Password 

         Schema 
            email unique 
            username unique 
            password 
            status  
            created_at 
              when registered 
                  databse 
                    email 
                    username 
                    password
                    status 0 
                send a email to registred email 
                   Welcome : username 
                   Your are successfuly registerd 
                  To activate your account click the below link 
                  http://localhost:9999/activateaccount/emailidofuser 
        -> Error Handling in express js 
          -> How error handling work in express js 
            Express automatically catching errors in route handlers, so we easilly handle these erros.
            Most error handling functionalities is acheived through middleware function.
              -> Express Middleware functions 
                It come into play after the server receives the request and before the response fires to the client.It acces to the request and response objects.
                   -> They are triggered top to bottom 
                   -> They operate until the process exists or the response has been sent back to the client.
                   eg:
                   app.use((req,res,next)=>{
                       //define logic 
                       next();//calling next middleware function or handler function 
                   })
              -> Default Error Handling  (try/catch)
                app.get("/",(req,res)=>{
                   throw new Error("Default error");
                })
              -> Handling Custom errors 
                 -> define our custom error handling logic for each route handler 
              -> Write our error handling middleware function
        -> File Uploading 
            we have multer middleware for file uploading 
            npm install multer --save 